module Type
  use Ref
  use mach.int.Int
  use prelude.Int8
  use prelude.Int16
  use mach.int.Int32
  use mach.int.Int64
  use prelude.UInt8
  use prelude.UInt16
  use mach.int.UInt32
  use mach.int.UInt64
  use string.Char
  use floating_point.Single
  use floating_point.Double
  use prelude.Prelude
  type poitncloud_point  = 
    | Poitncloud_Point int64 int64 int64
    
  function poitncloud_point_Point_x (self : poitncloud_point) : int64
  val poitncloud_point_Point_x (self : poitncloud_point) : int64
    ensures { result = poitncloud_point_Point_x self }
    
  axiom poitncloud_point_Point_x_acc : forall a : int64, b : int64, c : int64 . poitncloud_point_Point_x (Poitncloud_Point a b c : poitncloud_point) = a
  function poitncloud_point_Point_y (self : poitncloud_point) : int64
  val poitncloud_point_Point_y (self : poitncloud_point) : int64
    ensures { result = poitncloud_point_Point_y self }
    
  axiom poitncloud_point_Point_y_acc : forall a : int64, b : int64, c : int64 . poitncloud_point_Point_y (Poitncloud_Point a b c : poitncloud_point) = b
  function poitncloud_point_Point_z (self : poitncloud_point) : int64
  val poitncloud_point_Point_z (self : poitncloud_point) : int64
    ensures { result = poitncloud_point_Point_z self }
    
  axiom poitncloud_point_Point_z_acc : forall a : int64, b : int64, c : int64 . poitncloud_point_Point_z (Poitncloud_Point a b c : poitncloud_point) = c
  type core_option_option 't = 
    | Core_Option_Option_None
    | Core_Option_Option_Some 't
    
  function core_option_option_Some_0 (self : core_option_option 't) : 't
  val core_option_option_Some_0 (self : core_option_option 't) : 't
    ensures { result = core_option_option_Some_0 self }
    
  axiom core_option_option_Some_0_acc : forall a : 't . core_option_option_Some_0 (Core_Option_Option_Some a : core_option_option 't) = a
  type creusotcontracts_std1_vec_vec 't  
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve_Interface
  type t   
  predicate resolve (self : t)
end
module CreusotContracts_Logic_Resolve_Impl2_Resolve
  type t   
  predicate resolve (self : t) = 
    true
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self   
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Impl2
  type t   
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t,
  predicate resolve = Resolve0.resolve
end
module Poitncloud_Impl1_Clone_Interface
  use prelude.Prelude
  use Type
  val clone' [@cfg:stackify] (self : Type.poitncloud_point) : Type.poitncloud_point
end
module Poitncloud_Impl1_Clone
  use prelude.Prelude
  use Type
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = Type.poitncloud_point
  let rec cfg clone' [@cfg:stackify] (self : Type.poitncloud_point) : Type.poitncloud_point = 
  var _0 : Type.poitncloud_point;
  var self_1 : Type.poitncloud_point;
  {
    self_1 <- self;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _0 };
    _0 <- self_1;
    assume { Resolve1.resolve self_1 };
    return _0
  }
  
end
module CreusotContracts_Logic_Model_Model_ModelTy
  type self   
  type modelTy   
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : t) : ModelTy0.modelTy = 
    Model0.model self
end
module CreusotContracts_Std1_Vec_Impl0_ModelTy
  type t   
  use seq.Seq
  type modelTy  = 
    Seq.seq t
end
module CreusotContracts_Logic_Model_Impl0_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl0
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl0_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = t, type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl0_Model_Interface
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_Model
  type t   
  use Type
  use seq.Seq
  function model (self : Type.creusotcontracts_std1_vec_vec t) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0
  type t   
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = Type.creusotcontracts_std1_vec_vec t,
  function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type modelTy = ModelTy0.modelTy
end
module CreusotContracts_Std1_Vec_Impl1_Len_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module CreusotContracts_Std1_Vec_Impl1_Len
  type t   
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  use mach.int.Int
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val len [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) : usize
    ensures { UInt64.to_int result = Seq.length (Model0.model self) }
    
end
module Core_Ops_Index_Index_Output
  type self   
  type idx   
  type output   
end
module Core_Ops_Index_Index_Index_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_Index_Index
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index [@cfg:stackify] (self : self) (index : idx) : Output0.output
    requires {false}
    
end
module CreusotContracts_Std1_Vec_Impl3_Index_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Index
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  val index [@cfg:stackify] (self : Type.creusotcontracts_std1_vec_vec t) (ix : usize) : t
    requires {UInt64.to_int ix < Seq.length (Model0.model self)}
    ensures { result = Seq.get (Model0.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl3_Output
  type t   
  type output  = 
    t
end
module CreusotContracts_Std1_Vec_Impl3
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = t, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone Core_Ops_Index_Index_Index_Interface as Index1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, val index = Index0.index, type Output0.output = Output0.output
  clone Core_Ops_Index_Index_Output as Output1 with type self = Type.creusotcontracts_std1_vec_vec t, type idx = usize,
  type output = Output0.output
end
module Poitncloud_MaxX_Interface
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val max_x [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) : Type.core_option_option int64
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.poitncloud_point_Point_x (Seq.get (Model0.model p) i) <= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.poitncloud_point_Point_x (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Poitncloud_MaxX
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int64
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.poitncloud_point
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = ()
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.poitncloud_point,
  function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.poitncloud_point,
  function Model0.model = Model0.model
  let rec cfg max_x [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) : Type.core_option_option int64
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.poitncloud_point_Point_x (Seq.get (Model0.model p) i) <= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.poitncloud_point_Point_x (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
   = 
  var _0 : Type.core_option_option int64;
  var p_1 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _7 : ();
  var max_seen_8 : int64;
  var _9 : Type.poitncloud_point;
  var _10 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var max_idx_11 : usize;
  var i_12 : usize;
  var _13 : ();
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _19 : ();
  var _20 : bool;
  var _21 : int64;
  var _22 : Type.poitncloud_point;
  var _23 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _24 : usize;
  var _25 : int64;
  var _26 : int64;
  var _27 : Type.poitncloud_point;
  var _28 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _29 : usize;
  var _30 : usize;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : int64;
  {
    p_1 <- p;
    goto BB0
  }
  BB0 {
    _6 <- p_1;
    _5 <- Len0.len _6;
    goto BB1
  }
  BB1 {
    _4 <- _5 = (0 : usize);
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve p_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB14
  }
  BB3 {
    _3 <- ();
    assume { Resolve1.resolve _3 };
    _10 <- p_1;
    _9 <- Index0.index _10 (0 : usize);
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve max_seen_8 };
    max_seen_8 <- Type.poitncloud_point_Point_x _9;
    assume { Resolve3.resolve _9 };
    max_idx_11 <- (0 : usize);
    assume { Resolve4.resolve max_idx_11 };
    i_12 <- (1 : usize);
    goto BB5
  }
  BB5 {
    invariant i_less { 1 <= UInt64.to_int i_12 && UInt64.to_int i_12 <= Seq.length (Model0.model p_1) };
    invariant max_idx_less { 0 <= UInt64.to_int max_idx_11 && UInt64.to_int max_idx_11 < Seq.length (Model0.model p_1) };
    invariant max_is_max { forall j : (int) . 0 <= j && j < UInt64.to_int i_12 -> Type.poitncloud_point_Point_x (Seq.get (Model0.model p_1) j) <= max_seen_8 };
    invariant name { Type.poitncloud_point_Point_x (Seq.get (Model0.model p_1) (UInt64.to_int max_idx_11)) = max_seen_8 };
    assume { Resolve4.resolve _16 };
    _16 <- i_12;
    _18 <- p_1;
    _17 <- Len0.len _18;
    goto BB6
  }
  BB6 {
    _15 <- _16 < _17;
    switch (_15)
      | False -> goto BB13
      | _ -> goto BB7
      end
  }
  BB7 {
    _23 <- p_1;
    assume { Resolve4.resolve _24 };
    _24 <- i_12;
    _22 <- Index0.index _23 _24;
    goto BB8
  }
  BB8 {
    assume { Resolve2.resolve _21 };
    _21 <- Type.poitncloud_point_Point_x _22;
    assume { Resolve3.resolve _22 };
    assume { Resolve2.resolve _25 };
    _25 <- max_seen_8;
    _20 <- _21 > _25;
    switch (_20)
      | False -> goto BB11
      | _ -> goto BB9
      end
  }
  BB9 {
    assume { Resolve2.resolve max_seen_8 };
    _28 <- p_1;
    assume { Resolve4.resolve _29 };
    _29 <- i_12;
    _27 <- Index0.index _28 _29;
    goto BB10
  }
  BB10 {
    assume { Resolve2.resolve _26 };
    _26 <- Type.poitncloud_point_Point_x _27;
    assume { Resolve3.resolve _27 };
    assume { Resolve2.resolve max_seen_8 };
    max_seen_8 <- _26;
    assume { Resolve4.resolve _30 };
    _30 <- i_12;
    assume { Resolve4.resolve max_idx_11 };
    max_idx_11 <- _30;
    _19 <- ();
    assume { Resolve1.resolve _19 };
    goto BB12
  }
  BB11 {
    _19 <- ();
    assume { Resolve1.resolve _19 };
    goto BB12
  }
  BB12 {
    i_12 <- i_12 + (1 : usize);
    _14 <- ();
    assume { Resolve1.resolve _14 };
    goto BB5
  }
  BB13 {
    assume { Resolve0.resolve p_1 };
    assume { Resolve4.resolve i_12 };
    _13 <- ();
    assume { Resolve1.resolve _13 };
    assume { Resolve2.resolve _34 };
    _34 <- max_seen_8;
    assume { Resolve2.resolve max_seen_8 };
    _0 <- Type.Core_Option_Option_Some _34;
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module Poitncloud_MaxY_Interface
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val max_y [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) : Type.core_option_option int64
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.poitncloud_point_Point_y (Seq.get (Model0.model p) i) <= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.poitncloud_point_Point_y (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Poitncloud_MaxY
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int64
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.poitncloud_point
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = ()
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.poitncloud_point,
  function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.poitncloud_point,
  function Model0.model = Model0.model
  let rec cfg max_y [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) : Type.core_option_option int64
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.poitncloud_point_Point_y (Seq.get (Model0.model p) i) <= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.poitncloud_point_Point_y (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
   = 
  var _0 : Type.core_option_option int64;
  var p_1 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _7 : ();
  var max_seen_8 : int64;
  var _9 : Type.poitncloud_point;
  var _10 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var max_idx_11 : usize;
  var i_12 : usize;
  var _13 : ();
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _19 : ();
  var _20 : bool;
  var _21 : int64;
  var _22 : Type.poitncloud_point;
  var _23 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _24 : usize;
  var _25 : int64;
  var _26 : int64;
  var _27 : Type.poitncloud_point;
  var _28 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _29 : usize;
  var _30 : usize;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : int64;
  {
    p_1 <- p;
    goto BB0
  }
  BB0 {
    _6 <- p_1;
    _5 <- Len0.len _6;
    goto BB1
  }
  BB1 {
    _4 <- _5 = (0 : usize);
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve p_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB14
  }
  BB3 {
    _3 <- ();
    assume { Resolve1.resolve _3 };
    _10 <- p_1;
    _9 <- Index0.index _10 (0 : usize);
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve max_seen_8 };
    max_seen_8 <- Type.poitncloud_point_Point_y _9;
    assume { Resolve3.resolve _9 };
    max_idx_11 <- (0 : usize);
    assume { Resolve4.resolve max_idx_11 };
    i_12 <- (1 : usize);
    goto BB5
  }
  BB5 {
    invariant i_less { 1 <= UInt64.to_int i_12 && UInt64.to_int i_12 <= Seq.length (Model0.model p_1) };
    invariant max_idx_less { 0 <= UInt64.to_int max_idx_11 && UInt64.to_int max_idx_11 < Seq.length (Model0.model p_1) };
    invariant max_is_max { forall j : (int) . 0 <= j && j < UInt64.to_int i_12 -> Type.poitncloud_point_Point_y (Seq.get (Model0.model p_1) j) <= max_seen_8 };
    invariant name { Type.poitncloud_point_Point_y (Seq.get (Model0.model p_1) (UInt64.to_int max_idx_11)) = max_seen_8 };
    assume { Resolve4.resolve _16 };
    _16 <- i_12;
    _18 <- p_1;
    _17 <- Len0.len _18;
    goto BB6
  }
  BB6 {
    _15 <- _16 < _17;
    switch (_15)
      | False -> goto BB13
      | _ -> goto BB7
      end
  }
  BB7 {
    _23 <- p_1;
    assume { Resolve4.resolve _24 };
    _24 <- i_12;
    _22 <- Index0.index _23 _24;
    goto BB8
  }
  BB8 {
    assume { Resolve2.resolve _21 };
    _21 <- Type.poitncloud_point_Point_y _22;
    assume { Resolve3.resolve _22 };
    assume { Resolve2.resolve _25 };
    _25 <- max_seen_8;
    _20 <- _21 > _25;
    switch (_20)
      | False -> goto BB11
      | _ -> goto BB9
      end
  }
  BB9 {
    assume { Resolve2.resolve max_seen_8 };
    _28 <- p_1;
    assume { Resolve4.resolve _29 };
    _29 <- i_12;
    _27 <- Index0.index _28 _29;
    goto BB10
  }
  BB10 {
    assume { Resolve2.resolve _26 };
    _26 <- Type.poitncloud_point_Point_y _27;
    assume { Resolve3.resolve _27 };
    assume { Resolve2.resolve max_seen_8 };
    max_seen_8 <- _26;
    assume { Resolve4.resolve _30 };
    _30 <- i_12;
    assume { Resolve4.resolve max_idx_11 };
    max_idx_11 <- _30;
    _19 <- ();
    assume { Resolve1.resolve _19 };
    goto BB12
  }
  BB11 {
    _19 <- ();
    assume { Resolve1.resolve _19 };
    goto BB12
  }
  BB12 {
    i_12 <- i_12 + (1 : usize);
    _14 <- ();
    assume { Resolve1.resolve _14 };
    goto BB5
  }
  BB13 {
    assume { Resolve0.resolve p_1 };
    assume { Resolve4.resolve i_12 };
    _13 <- ();
    assume { Resolve1.resolve _13 };
    assume { Resolve2.resolve _34 };
    _34 <- max_seen_8;
    assume { Resolve2.resolve max_seen_8 };
    _0 <- Type.Core_Option_Option_Some _34;
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module Poitncloud_MaxZ_Interface
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val max_z [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) : Type.core_option_option int64
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.poitncloud_point_Point_z (Seq.get (Model0.model p) i) <= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.poitncloud_point_Point_z (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Poitncloud_MaxZ
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int64
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.poitncloud_point
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = ()
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.poitncloud_point,
  function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.poitncloud_point,
  function Model0.model = Model0.model
  let rec cfg max_z [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) : Type.core_option_option int64
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.poitncloud_point_Point_z (Seq.get (Model0.model p) i) <= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.poitncloud_point_Point_z (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
   = 
  var _0 : Type.core_option_option int64;
  var p_1 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _7 : ();
  var max_seen_8 : int64;
  var _9 : Type.poitncloud_point;
  var _10 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var max_idx_11 : usize;
  var i_12 : usize;
  var _13 : ();
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _19 : ();
  var _20 : bool;
  var _21 : int64;
  var _22 : Type.poitncloud_point;
  var _23 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _24 : usize;
  var _25 : int64;
  var _26 : int64;
  var _27 : Type.poitncloud_point;
  var _28 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _29 : usize;
  var _30 : usize;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : int64;
  {
    p_1 <- p;
    goto BB0
  }
  BB0 {
    _6 <- p_1;
    _5 <- Len0.len _6;
    goto BB1
  }
  BB1 {
    _4 <- _5 = (0 : usize);
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve p_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB14
  }
  BB3 {
    _3 <- ();
    assume { Resolve1.resolve _3 };
    _10 <- p_1;
    _9 <- Index0.index _10 (0 : usize);
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve max_seen_8 };
    max_seen_8 <- Type.poitncloud_point_Point_z _9;
    assume { Resolve3.resolve _9 };
    max_idx_11 <- (0 : usize);
    assume { Resolve4.resolve max_idx_11 };
    i_12 <- (1 : usize);
    goto BB5
  }
  BB5 {
    invariant i_less { 1 <= UInt64.to_int i_12 && UInt64.to_int i_12 <= Seq.length (Model0.model p_1) };
    invariant max_idx_less { 0 <= UInt64.to_int max_idx_11 && UInt64.to_int max_idx_11 < Seq.length (Model0.model p_1) };
    invariant max_is_max { forall j : (int) . 0 <= j && j < UInt64.to_int i_12 -> Type.poitncloud_point_Point_z (Seq.get (Model0.model p_1) j) <= max_seen_8 };
    invariant name { Type.poitncloud_point_Point_z (Seq.get (Model0.model p_1) (UInt64.to_int max_idx_11)) = max_seen_8 };
    assume { Resolve4.resolve _16 };
    _16 <- i_12;
    _18 <- p_1;
    _17 <- Len0.len _18;
    goto BB6
  }
  BB6 {
    _15 <- _16 < _17;
    switch (_15)
      | False -> goto BB13
      | _ -> goto BB7
      end
  }
  BB7 {
    _23 <- p_1;
    assume { Resolve4.resolve _24 };
    _24 <- i_12;
    _22 <- Index0.index _23 _24;
    goto BB8
  }
  BB8 {
    assume { Resolve2.resolve _21 };
    _21 <- Type.poitncloud_point_Point_z _22;
    assume { Resolve3.resolve _22 };
    assume { Resolve2.resolve _25 };
    _25 <- max_seen_8;
    _20 <- _21 > _25;
    switch (_20)
      | False -> goto BB11
      | _ -> goto BB9
      end
  }
  BB9 {
    assume { Resolve2.resolve max_seen_8 };
    _28 <- p_1;
    assume { Resolve4.resolve _29 };
    _29 <- i_12;
    _27 <- Index0.index _28 _29;
    goto BB10
  }
  BB10 {
    assume { Resolve2.resolve _26 };
    _26 <- Type.poitncloud_point_Point_z _27;
    assume { Resolve3.resolve _27 };
    assume { Resolve2.resolve max_seen_8 };
    max_seen_8 <- _26;
    assume { Resolve4.resolve _30 };
    _30 <- i_12;
    assume { Resolve4.resolve max_idx_11 };
    max_idx_11 <- _30;
    _19 <- ();
    assume { Resolve1.resolve _19 };
    goto BB12
  }
  BB11 {
    _19 <- ();
    assume { Resolve1.resolve _19 };
    goto BB12
  }
  BB12 {
    i_12 <- i_12 + (1 : usize);
    _14 <- ();
    assume { Resolve1.resolve _14 };
    goto BB5
  }
  BB13 {
    assume { Resolve0.resolve p_1 };
    assume { Resolve4.resolve i_12 };
    _13 <- ();
    assume { Resolve1.resolve _13 };
    assume { Resolve2.resolve _34 };
    _34 <- max_seen_8;
    assume { Resolve2.resolve max_seen_8 };
    _0 <- Type.Core_Option_Option_Some _34;
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module Poitncloud_MinZ_Interface
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val min_z [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) : Type.core_option_option int64
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.poitncloud_point_Point_z (Seq.get (Model0.model p) i) >= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.poitncloud_point_Point_z (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Poitncloud_MinZ
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int64
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.poitncloud_point
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve1 with type t = ()
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.poitncloud_point,
  function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.poitncloud_point,
  function Model0.model = Model0.model
  let rec cfg min_z [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) : Type.core_option_option int64
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.poitncloud_point_Point_z (Seq.get (Model0.model p) i) >= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.poitncloud_point_Point_z (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
   = 
  var _0 : Type.core_option_option int64;
  var p_1 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _2 : ();
  var _3 : ();
  var _4 : bool;
  var _5 : usize;
  var _6 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _7 : ();
  var min_seen_8 : int64;
  var _9 : Type.poitncloud_point;
  var _10 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var min_idx_11 : usize;
  var i_12 : usize;
  var _13 : ();
  var _14 : ();
  var _15 : bool;
  var _16 : usize;
  var _17 : usize;
  var _18 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _19 : ();
  var _20 : bool;
  var _21 : int64;
  var _22 : Type.poitncloud_point;
  var _23 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _24 : usize;
  var _25 : int64;
  var _26 : int64;
  var _27 : Type.poitncloud_point;
  var _28 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _29 : usize;
  var _30 : usize;
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : int64;
  {
    p_1 <- p;
    goto BB0
  }
  BB0 {
    _6 <- p_1;
    _5 <- Len0.len _6;
    goto BB1
  }
  BB1 {
    _4 <- _5 = (0 : usize);
    switch (_4)
      | False -> goto BB3
      | _ -> goto BB2
      end
  }
  BB2 {
    assume { Resolve0.resolve p_1 };
    _0 <- Type.Core_Option_Option_None;
    goto BB14
  }
  BB3 {
    _3 <- ();
    assume { Resolve1.resolve _3 };
    _10 <- p_1;
    _9 <- Index0.index _10 (0 : usize);
    goto BB4
  }
  BB4 {
    assume { Resolve2.resolve min_seen_8 };
    min_seen_8 <- Type.poitncloud_point_Point_z _9;
    assume { Resolve3.resolve _9 };
    min_idx_11 <- (0 : usize);
    assume { Resolve4.resolve min_idx_11 };
    i_12 <- (1 : usize);
    goto BB5
  }
  BB5 {
    invariant i_less { 1 <= UInt64.to_int i_12 && UInt64.to_int i_12 <= Seq.length (Model0.model p_1) };
    invariant min_idx_less { 0 <= UInt64.to_int min_idx_11 && UInt64.to_int min_idx_11 < Seq.length (Model0.model p_1) };
    invariant min_is_min { forall j : (int) . 0 <= j && j < UInt64.to_int i_12 -> Type.poitncloud_point_Point_z (Seq.get (Model0.model p_1) j) >= min_seen_8 };
    assume { Resolve4.resolve _16 };
    _16 <- i_12;
    _18 <- p_1;
    _17 <- Len0.len _18;
    goto BB6
  }
  BB6 {
    _15 <- _16 < _17;
    switch (_15)
      | False -> goto BB13
      | _ -> goto BB7
      end
  }
  BB7 {
    _23 <- p_1;
    assume { Resolve4.resolve _24 };
    _24 <- i_12;
    _22 <- Index0.index _23 _24;
    goto BB8
  }
  BB8 {
    assume { Resolve2.resolve _21 };
    _21 <- Type.poitncloud_point_Point_z _22;
    assume { Resolve3.resolve _22 };
    assume { Resolve2.resolve _25 };
    _25 <- min_seen_8;
    _20 <- _21 < _25;
    switch (_20)
      | False -> goto BB11
      | _ -> goto BB9
      end
  }
  BB9 {
    assume { Resolve2.resolve min_seen_8 };
    _28 <- p_1;
    assume { Resolve4.resolve _29 };
    _29 <- i_12;
    _27 <- Index0.index _28 _29;
    goto BB10
  }
  BB10 {
    assume { Resolve2.resolve _26 };
    _26 <- Type.poitncloud_point_Point_z _27;
    assume { Resolve3.resolve _27 };
    assume { Resolve2.resolve min_seen_8 };
    min_seen_8 <- _26;
    assume { Resolve4.resolve _30 };
    _30 <- i_12;
    assume { Resolve4.resolve min_idx_11 };
    min_idx_11 <- _30;
    _19 <- ();
    assume { Resolve1.resolve _19 };
    goto BB12
  }
  BB11 {
    _19 <- ();
    assume { Resolve1.resolve _19 };
    goto BB12
  }
  BB12 {
    i_12 <- i_12 + (1 : usize);
    _14 <- ();
    assume { Resolve1.resolve _14 };
    goto BB5
  }
  BB13 {
    assume { Resolve0.resolve p_1 };
    assume { Resolve4.resolve i_12 };
    _13 <- ();
    assume { Resolve1.resolve _13 };
    assume { Resolve2.resolve _34 };
    _34 <- min_seen_8;
    assume { Resolve2.resolve min_seen_8 };
    _0 <- Type.Core_Option_Option_Some _34;
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module Poitncloud_MinY_Interface
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val min_y [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) : Type.core_option_option int64
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.poitncloud_point_Point_y (Seq.get (Model0.model p) i) >= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.poitncloud_point_Point_y (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Poitncloud_MinY
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.poitncloud_point
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val min_y [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) : Type.core_option_option int64
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.poitncloud_point_Point_y (Seq.get (Model0.model p) i) >= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.poitncloud_point_Point_y (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Poitncloud_MinX_Interface
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl0_Model_Interface as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy
  val min_x [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) : Type.core_option_option int64
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.poitncloud_point_Point_x (Seq.get (Model0.model p) i) >= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.poitncloud_point_Point_x (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Poitncloud_MinX
  use Type
  use mach.int.Int
  use mach.int.Int64
  use mach.int.Int32
  use seq.Seq
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = Type.poitncloud_point
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl0_Model as Model0 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model1.model
  val min_x [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) : Type.core_option_option int64
    ensures { match (result) with
      | Type.Core_Option_Option_Some v -> (forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Type.poitncloud_point_Point_x (Seq.get (Model0.model p) i) >= v) && (exists i : (int) . 0 <= i && i < Seq.length (Model0.model p) && Int64.to_int (Type.poitncloud_point_Point_x (Seq.get (Model0.model p) i)) = Int64.to_int v)
      | Type.Core_Option_Option_None -> Seq.length (Model0.model p) = 0
      end }
    
end
module Poitncloud_Abs_Interface
  use mach.int.Int64
  use mach.int.Int
  use mach.int.Int32
  val abs [@cfg:stackify] (i : int64) : int64
    ensures { Int64.to_int result = (if Int64.to_int i < 0 then - Int64.to_int i else Int64.to_int i) }
    ensures { Int64.to_int result >= 0 }
    
end
module Poitncloud_Abs
  use mach.int.Int64
  use mach.int.Int
  use mach.int.Int32
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = int64
  let rec cfg abs [@cfg:stackify] (i : int64) : int64
    ensures { Int64.to_int result = (if Int64.to_int i < 0 then - Int64.to_int i else Int64.to_int i) }
    ensures { Int64.to_int result >= 0 }
    
   = 
  var _0 : int64;
  var i_1 : int64;
  var _2 : bool;
  var _3 : int64;
  var _4 : int64;
  {
    i_1 <- i;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _3 };
    _3 <- i_1;
    _2 <- _3 < (0 : int64);
    switch (_2)
      | False -> goto BB2
      | _ -> goto BB1
      end
  }
  BB1 {
    assume { Resolve0.resolve _4 };
    _4 <- i_1;
    assume { Resolve0.resolve i_1 };
    _0 <- - _4;
    goto BB3
  }
  BB2 {
    assume { Resolve0.resolve _0 };
    _0 <- i_1;
    assume { Resolve0.resolve i_1 };
    goto BB3
  }
  BB3 {
    return _0
  }
  
end
module Poitncloud_IntDiv_Interface
  use mach.int.Int64
  use mach.int.Int
  use mach.int.Int32
  val int_div [@cfg:stackify] (sup : int64) (d : int64) : int64
    requires {not (Int64.to_int d = 0)}
    ensures { Int64.to_int result = div (Int64.to_int sup) (Int64.to_int d) }
    
end
module Poitncloud_IntDiv
  use mach.int.Int64
  use mach.int.Int
  use mach.int.Int32
  val int_div [@cfg:stackify] (sup : int64) (d : int64) : int64
    requires {not (Int64.to_int d = 0)}
    ensures { Int64.to_int result = div (Int64.to_int sup) (Int64.to_int d) }
    
end
module Poitncloud_Impl0_Add_Interface
  use Type
  use prelude.Prelude
  val add [@cfg:stackify] (self : Type.poitncloud_point) (rhs : Type.poitncloud_point) : Type.poitncloud_point
end
module Poitncloud_Impl0_Add
  use Type
  use prelude.Prelude
  val add [@cfg:stackify] (self : Type.poitncloud_point) (rhs : Type.poitncloud_point) : Type.poitncloud_point
end
module Poitncloud_Offset_Interface
  use mach.int.Int64
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  val offset [@cfg:stackify] (x : int64) (y : int64) (z : int64) : usize
    requires {Int64.to_int z >= 0}
    requires {Int64.to_int y >= 0}
    requires {Int64.to_int x >= 0}
    ensures { UInt64.to_int result = Int64.to_int x * Int64.to_int y * Int64.to_int z }
    
end
module Poitncloud_Offset
  use mach.int.Int64
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = int64
  let rec cfg offset [@cfg:stackify] (x : int64) (y : int64) (z : int64) : usize
    requires {Int64.to_int z >= 0}
    requires {Int64.to_int y >= 0}
    requires {Int64.to_int x >= 0}
    ensures { UInt64.to_int result = Int64.to_int x * Int64.to_int y * Int64.to_int z }
    
   = 
  var _0 : usize;
  var x_1 : int64;
  var y_2 : int64;
  var z_3 : int64;
  var _4 : int64;
  var _5 : int64;
  var _6 : int64;
  var _7 : int64;
  var _8 : int64;
  {
    x_1 <- x;
    y_2 <- y;
    z_3 <- z;
    goto BB0
  }
  BB0 {
    assume { Resolve0.resolve _6 };
    _6 <- x_1;
    assume { Resolve0.resolve x_1 };
    assume { Resolve0.resolve _7 };
    _7 <- y_2;
    assume { Resolve0.resolve y_2 };
    _5 <- _6 * _7;
    assume { Resolve0.resolve _8 };
    _8 <- z_3;
    assume { Resolve0.resolve z_3 };
    _4 <- _5 * _8;
    _0 <- UInt64.of_int (Int64.to_int _4);
    return _0
  }
  
end
module Poitncloud_Unwrap_Interface
  type t   
  use Type
  val unwrap [@cfg:stackify] (o : Type.core_option_option t) : t
    requires {not (o = Type.Core_Option_Option_None)}
    ensures { Type.Core_Option_Option_Some result = o }
    
end
module Poitncloud_Unwrap
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.Int64
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Type.core_option_option t
  let rec cfg unwrap [@cfg:stackify] (o : Type.core_option_option t) : t
    requires {not (o = Type.Core_Option_Option_None)}
    ensures { Type.Core_Option_Option_Some result = o }
    
   = 
  var _0 : t;
  var o_1 : Type.core_option_option t;
  var _2 : isize;
  var t_3 : t;
  var _4 : ();
  {
    o_1 <- o;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    switch (o_1)
      | Type.Core_Option_Option_None -> goto BB3
      | Type.Core_Option_Option_Some _ -> goto BB5
      end
  }
  BB3 {
    absurd
  }
  BB4 {
    assume { Resolve0.resolve o_1 };
    absurd
  }
  BB5 {
    assume { Resolve1.resolve t_3 };
    t_3 <- Type.core_option_option_Some_0 o_1;
    assume { Resolve1.resolve _0 };
    _0 <- t_3;
    goto BB6
  }
  BB6 {
    goto BB7
  }
  BB7 {
    assume { Resolve0.resolve o_1 };
    return _0
  }
  
end
module CreusotContracts_Std1_Vec_Impl1_New_Interface
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val new [@cfg:stackify] () : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Std1_Vec_Impl1_New
  type t   
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val new [@cfg:stackify] () : Type.creusotcontracts_std1_vec_vec t
    ensures { Seq.length (Model0.model result) = 0 }
    
end
module CreusotContracts_Std1_Vec_Impl5_Resolve_Interface
  type t   
  use Type
  predicate resolve (self : Type.creusotcontracts_std1_vec_vec t)
end
module CreusotContracts_Std1_Vec_Impl5_Resolve
  type t   
  use Type
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  predicate resolve (self : Type.creusotcontracts_std1_vec_vec t) = 
    forall i : (int) . 0 <= i && i < Seq.length (Model0.model self) -> Resolve0.resolve (Seq.get (Model0.model self) i)
end
module CreusotContracts_Std1_Vec_FromElem_Interface
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module CreusotContracts_Std1_Vec_FromElem
  type t   
  use mach.int.Int
  use mach.int.Int32
  use mach.int.UInt64
  use seq.Seq
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val from_elem [@cfg:stackify] (elem : t) (n : usize) : Type.creusotcontracts_std1_vec_vec t
    ensures { forall i : (int) . 0 <= i && i < UInt64.to_int n -> Seq.get (Model0.model result) i = elem }
    ensures { Seq.length (Model0.model result) = UInt64.to_int n }
    
end
module Core_Ops_Arith_Add_Output
  type self   
  type rhs   
  type output   
end
module Core_Ops_Arith_Add_Add_Interface
  type self   
  type rhs   
  clone Core_Ops_Arith_Add_Output as Output0 with type self = self, type rhs = rhs
  val add [@cfg:stackify] (self : self) (rhs : rhs) : Output0.output
    requires {false}
    
end
module Core_Ops_Arith_Add_Add
  type self   
  type rhs   
  clone Core_Ops_Arith_Add_Output as Output0 with type self = self, type rhs = rhs
  val add [@cfg:stackify] (self : self) (rhs : rhs) : Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut_Interface
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module Core_Ops_Index_IndexMut_IndexMut
  type self   
  type idx   
  use prelude.Prelude
  clone Core_Ops_Index_Index_Output as Output0 with type self = self, type idx = idx
  val index_mut [@cfg:stackify] (self : borrowed self) (index : idx) : borrowed Output0.output
    requires {false}
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model0 with type self = t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy = 
    Model0.model ( * self)
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Std1_Vec_Impl2_IndexMut
  type t   
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model_Interface as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = t
  val index_mut [@cfg:stackify] (self : borrowed (Type.creusotcontracts_std1_vec_vec t)) (ix : usize) : borrowed t
    requires {UInt64.to_int ix < Seq.length (Model0.model ( * self))}
    ensures { Seq.length (Model0.model ( * self)) = Seq.length (Model0.model ( ^ self)) }
    ensures { forall j : (int) . 0 <= j && j < Seq.length (Model0.model ( ^ self)) -> not (j = UInt64.to_int ix) -> Seq.get (Model0.model ( ^ self)) j = Seq.get (Model0.model ( * self)) j }
    ensures {  ^ result = Seq.get (Model0.model ( ^ self)) (UInt64.to_int ix) }
    ensures {  * result = Seq.get (Model1.model self) (UInt64.to_int ix) }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t   
  use prelude.Prelude
  predicate resolve (self : borrowed t) = 
     ^ self =  * self
end
module Poitncloud_Average_Interface
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model1 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.poitncloud_point
  val average [@cfg:stackify] (count_array : Type.creusotcontracts_std1_vec_vec usize) (voxel_array : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) (num_vox_x : usize) (num_vox_y : usize) (num_vox_z : usize) : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)
    requires {Seq.length (Model0.model voxel_array) = Seq.length (Model1.model count_array)}
    requires {Seq.length (Model1.model count_array) = UInt64.to_int num_vox_x * UInt64.to_int num_vox_y * UInt64.to_int num_vox_z}
    requires {UInt64.to_int num_vox_z <= 1000}
    requires {UInt64.to_int num_vox_y <= 1000}
    requires {UInt64.to_int num_vox_x <= 1000}
    
end
module Poitncloud_Average
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.poitncloud_point
  val average [@cfg:stackify] (count_array : Type.creusotcontracts_std1_vec_vec usize) (voxel_array : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) (num_vox_x : usize) (num_vox_y : usize) (num_vox_z : usize) : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)
    requires {Seq.length (Model0.model voxel_array) = Seq.length (Model1.model count_array)}
    requires {Seq.length (Model1.model count_array) = UInt64.to_int num_vox_x * UInt64.to_int num_vox_y * UInt64.to_int num_vox_z}
    requires {UInt64.to_int num_vox_z <= 1000}
    requires {UInt64.to_int num_vox_y <= 1000}
    requires {UInt64.to_int num_vox_x <= 1000}
    
end
module CreusotContracts_Std1_Vec_Impl5
  type t   
  use Type
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl5_Resolve as Resolve0 with type t = t, function Model0.model = Model0.model,
  predicate Resolve0.resolve = Resolve2.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = Type.creusotcontracts_std1_vec_vec t,
  predicate resolve = Resolve0.resolve
end
module Poitncloud_Impl0_Output
  use Type
  type output  = 
    Type.poitncloud_point
end
module Poitncloud_Impl0
  use Type
  use prelude.Prelude
  clone Poitncloud_Impl0_Add_Interface as Add0
  clone Poitncloud_Impl0_Output as Output0
  clone Core_Ops_Arith_Add_Add_Interface as Add1 with type self = Type.poitncloud_point,
  type rhs = Type.poitncloud_point, val add = Add0.add, type Output0.output = Output0.output
  clone Core_Ops_Arith_Add_Output as Output1 with type self = Type.poitncloud_point, type rhs = Type.poitncloud_point,
  type output = Output0.output
end
module CreusotContracts_Std1_Vec_Impl2
  type t   
  use Type
  use mach.int.Int
  use prelude.Prelude
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl3_Output as Output0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = Type.creusotcontracts_std1_vec_vec t,
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = t,
  function Model0.model = Model0.model, function Model1.model = Model1.model
  clone Core_Ops_Index_IndexMut_IndexMut_Interface as IndexMut1 with type self = Type.creusotcontracts_std1_vec_vec t,
  type idx = usize, val index_mut = IndexMut0.index_mut, type Output0.output = Output0.output
end
module CreusotContracts_Logic_Resolve_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = borrowed t,
  predicate resolve = Resolve0.resolve
end
module CreusotContracts_Logic_Model_Impl1_ModelTy
  type t   
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy0 with type self = t
  type modelTy  = 
    ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1
  type t   
  use prelude.Prelude
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy2 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model as Model2 with type self = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Impl1_Model as Model0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy,
  function Model0.model = Model2.model
  clone CreusotContracts_Logic_Model_Impl1_ModelTy as ModelTy0 with type t = t, type ModelTy0.modelTy = ModelTy2.modelTy
  clone CreusotContracts_Logic_Model_Model_Model as Model1 with type self = borrowed t, function model = Model0.model,
  type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy as ModelTy1 with type self = borrowed t,
  type modelTy = ModelTy0.modelTy
end
module Poitncloud_Downsample_Interface
  use mach.int.Int64
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use Type
  clone CreusotContracts_Std1_Vec_Impl0_Model_Interface as Model0 with type t = Type.poitncloud_point
  val downsample [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) (voxel_size : int64) : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)
    requires {Int64.to_int voxel_size > 0}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Int64.to_int (Type.poitncloud_point_Point_z (Seq.get (Model0.model p) i)) < 1000 && Int64.to_int (Type.poitncloud_point_Point_z (Seq.get (Model0.model p) i)) >= - 1000}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Int64.to_int (Type.poitncloud_point_Point_y (Seq.get (Model0.model p) i)) < 1000 && Int64.to_int (Type.poitncloud_point_Point_y (Seq.get (Model0.model p) i)) >= - 1000}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Int64.to_int (Type.poitncloud_point_Point_x (Seq.get (Model0.model p) i)) < 1000 && Int64.to_int (Type.poitncloud_point_Point_x (Seq.get (Model0.model p) i)) >= - 1000}
    
end
module Poitncloud_Downsample
  use mach.int.Int
  use mach.int.Int32
  use seq.Seq
  use mach.int.Int64
  use mach.int.UInt64
  use Type
  use prelude.Prelude
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model1 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_Model as Model0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve9 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve8 with type t = usize
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy1 with type t = usize
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve7 with type t = Type.poitncloud_point
  clone Poitncloud_Impl0_Add_Interface as Add0
  clone Poitncloud_Offset_Interface as Offset0
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve5 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve4 with type t = usize
  clone Poitncloud_IntDiv_Interface as IntDiv0
  clone Poitncloud_Abs_Interface as Abs0
  clone Poitncloud_Unwrap_Interface as Unwrap0 with type t = int64
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve3 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve2 with type t = ()
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve6 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Resolve_Impl2_Resolve as Resolve0 with type t = int64
  clone CreusotContracts_Std1_Vec_Impl0_ModelTy as ModelTy0 with type t = Type.poitncloud_point
  clone CreusotContracts_Logic_Model_Impl1_Model as Model5 with type t = Type.creusotcontracts_std1_vec_vec usize,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut1 with type t = usize,
  function Model0.model = Model1.model, function Model1.model = Model5.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model4 with type t = Type.creusotcontracts_std1_vec_vec usize,
  type ModelTy0.modelTy = ModelTy1.modelTy, function Model0.model = Model1.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index1 with type t = usize,
  function Model0.model = Model4.model
  clone CreusotContracts_Std1_Vec_Impl5_Resolve as Resolve10 with type t = usize, function Model0.model = Model1.model,
  predicate Resolve0.resolve = Resolve4.resolve
  clone CreusotContracts_Std1_Vec_FromElem_Interface as FromElem1 with type t = usize,
  function Model0.model = Model1.model
  clone CreusotContracts_Logic_Model_Impl1_Model as Model3 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl2_IndexMut_Interface as IndexMut0 with type t = Type.poitncloud_point,
  function Model0.model = Model0.model, function Model1.model = Model3.model
  clone CreusotContracts_Logic_Model_Impl0_Model as Model2 with type t = Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point),
  type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl3_Index_Interface as Index0 with type t = Type.poitncloud_point,
  function Model0.model = Model2.model
  clone Poitncloud_MinZ_Interface as MinZ0 with function Model0.model = Model2.model
  clone Poitncloud_MaxZ_Interface as MaxZ0 with function Model0.model = Model2.model
  clone Poitncloud_MinY_Interface as MinY0 with function Model0.model = Model2.model
  clone Poitncloud_MaxY_Interface as MaxY0 with function Model0.model = Model2.model
  clone Poitncloud_MinX_Interface as MinX0 with function Model0.model = Model2.model
  clone Poitncloud_MaxX_Interface as MaxX0 with function Model0.model = Model2.model
  clone CreusotContracts_Std1_Vec_Impl1_Len_Interface as Len0 with type t = Type.poitncloud_point,
  function Model0.model = Model2.model
  clone Poitncloud_Average_Interface as Average0 with function Model0.model = Model0.model,
  function Model1.model = Model1.model
  clone CreusotContracts_Std1_Vec_FromElem_Interface as FromElem0 with type t = Type.poitncloud_point,
  function Model0.model = Model0.model
  clone CreusotContracts_Std1_Vec_Impl5_Resolve as Resolve1 with type t = Type.poitncloud_point,
  function Model0.model = Model0.model, predicate Resolve0.resolve = Resolve6.resolve
  clone CreusotContracts_Std1_Vec_Impl1_New_Interface as New0 with type t = Type.poitncloud_point,
  function Model0.model = Model0.model
  let rec cfg downsample [@cfg:stackify] (p : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)) (voxel_size : int64) : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point)
    requires {Int64.to_int voxel_size > 0}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Int64.to_int (Type.poitncloud_point_Point_z (Seq.get (Model0.model p) i)) < 1000 && Int64.to_int (Type.poitncloud_point_Point_z (Seq.get (Model0.model p) i)) >= - 1000}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Int64.to_int (Type.poitncloud_point_Point_y (Seq.get (Model0.model p) i)) < 1000 && Int64.to_int (Type.poitncloud_point_Point_y (Seq.get (Model0.model p) i)) >= - 1000}
    requires {forall i : (int) . 0 <= i && i < Seq.length (Model0.model p) -> Int64.to_int (Type.poitncloud_point_Point_x (Seq.get (Model0.model p) i)) < 1000 && Int64.to_int (Type.poitncloud_point_Point_x (Seq.get (Model0.model p) i)) >= - 1000}
    
   = 
  var _0 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var p_1 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var voxel_size_2 : int64;
  var _3 : ();
  var _4 : ();
  var _5 : bool;
  var _6 : usize;
  var _7 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _8 : ();
  var x_max_9 : int64;
  var _10 : Type.core_option_option int64;
  var _11 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _12 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var x_min_13 : int64;
  var _14 : Type.core_option_option int64;
  var _15 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _16 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _17 : ();
  var _18 : ();
  var _19 : ();
  var num_vox_x_20 : int64;
  var _21 : int64;
  var _22 : int64;
  var _23 : int64;
  var _24 : int64;
  var _25 : int64;
  var _26 : int64;
  var y_max_27 : int64;
  var _28 : Type.core_option_option int64;
  var _29 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _30 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var y_min_31 : int64;
  var _32 : Type.core_option_option int64;
  var _33 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _34 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _35 : ();
  var num_vox_y_36 : int64;
  var _37 : int64;
  var _38 : int64;
  var _39 : int64;
  var _40 : int64;
  var _41 : int64;
  var _42 : int64;
  var z_max_43 : int64;
  var _44 : Type.core_option_option int64;
  var _45 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _46 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var z_min_47 : int64;
  var _48 : Type.core_option_option int64;
  var _49 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _50 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _51 : ();
  var num_vox_z_52 : int64;
  var _53 : int64;
  var _54 : int64;
  var _55 : int64;
  var _56 : int64;
  var _57 : int64;
  var _58 : int64;
  var _59 : ();
  var _60 : ();
  var _61 : ();
  var voxel_array_62 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _63 : Type.poitncloud_point;
  var _64 : usize;
  var _65 : int64;
  var _66 : int64;
  var _67 : int64;
  var _68 : int64;
  var _69 : int64;
  var count_array_70 : Type.creusotcontracts_std1_vec_vec usize;
  var _71 : usize;
  var _72 : int64;
  var _73 : int64;
  var _74 : int64;
  var _75 : int64;
  var _76 : int64;
  var i_77 : usize;
  var _78 : ();
  var _79 : ();
  var _80 : bool;
  var _81 : usize;
  var _82 : usize;
  var _83 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var pt_84 : Type.poitncloud_point;
  var _85 : Type.poitncloud_point;
  var _86 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _87 : usize;
  var x_floored_88 : int64;
  var _89 : int64;
  var _90 : int64;
  var _91 : int64;
  var _92 : int64;
  var y_floored_93 : int64;
  var _94 : int64;
  var _95 : int64;
  var _96 : int64;
  var _97 : int64;
  var z_floored_98 : int64;
  var _99 : int64;
  var _100 : int64;
  var _101 : int64;
  var _102 : int64;
  var _103 : ();
  var _104 : ();
  var _105 : ();
  var _106 : ();
  var _107 : ();
  var _108 : ();
  var _109 : ();
  var ix_110 : usize;
  var _111 : int64;
  var _112 : int64;
  var _113 : int64;
  var _114 : ();
  var _115 : Type.poitncloud_point;
  var _116 : Type.poitncloud_point;
  var _117 : Type.poitncloud_point;
  var _118 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _119 : usize;
  var _120 : Type.poitncloud_point;
  var _121 : borrowed (Type.poitncloud_point);
  var _122 : borrowed (Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point));
  var _123 : usize;
  var _124 : usize;
  var _125 : usize;
  var _126 : Type.creusotcontracts_std1_vec_vec usize;
  var _127 : usize;
  var _128 : borrowed usize;
  var _129 : borrowed (Type.creusotcontracts_std1_vec_vec usize);
  var _130 : usize;
  var _131 : ();
  var _132 : ();
  var _133 : ();
  var _134 : Type.creusotcontracts_std1_vec_vec usize;
  var _135 : Type.creusotcontracts_std1_vec_vec (Type.poitncloud_point);
  var _136 : usize;
  var _137 : int64;
  var _138 : usize;
  var _139 : int64;
  var _140 : usize;
  var _141 : int64;
  {
    p_1 <- p;
    voxel_size_2 <- voxel_size;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    _7 <- p_1;
    _6 <- Len0.len _7;
    goto BB4
  }
  BB4 {
    _5 <- _6 = (0 : usize);
    switch (_5)
      | False -> goto BB6
      | _ -> goto BB5
      end
  }
  BB5 {
    assume { Resolve0.resolve voxel_size_2 };
    _0 <- New0.new ();
    goto BB48
  }
  BB6 {
    _4 <- ();
    assume { Resolve2.resolve _4 };
    _12 <- p_1;
    _11 <- _12;
    assume { Resolve3.resolve _12 };
    _10 <- MaxX0.max_x _11;
    goto BB7
  }
  BB7 {
    x_max_9 <- Unwrap0.unwrap _10;
    goto BB8
  }
  BB8 {
    _16 <- p_1;
    _15 <- _16;
    assume { Resolve3.resolve _16 };
    _14 <- MinX0.min_x _15;
    goto BB9
  }
  BB9 {
    x_min_13 <- Unwrap0.unwrap _14;
    goto BB10
  }
  BB10 {
    assert { exists i : (int) . 0 <= i && i < Seq.length (Model0.model p_1) && Int64.to_int (Type.poitncloud_point_Point_x (Seq.get (Model0.model p_1) i)) = Int64.to_int x_max_9 };
    goto BB11
  }
  BB11 {
    _17 <- ();
    assume { Resolve2.resolve _17 };
    assert { exists i : (int) . 0 <= i && i < Seq.length (Model0.model p_1) && Int64.to_int (Type.poitncloud_point_Point_x (Seq.get (Model0.model p_1) i)) = Int64.to_int x_min_13 };
    goto BB12
  }
  BB12 {
    _18 <- ();
    assume { Resolve2.resolve _18 };
    assert { - 1000 <= Int64.to_int x_min_13 && Int64.to_int x_min_13 <= Int64.to_int x_max_9 && Int64.to_int x_max_9 < 1000 };
    _19 <- ();
    assume { Resolve2.resolve _19 };
    assume { Resolve0.resolve _24 };
    _24 <- x_max_9;
    assume { Resolve0.resolve x_max_9 };
    assume { Resolve0.resolve _25 };
    _25 <- x_min_13;
    _23 <- _24 - _25;
    _22 <- Abs0.abs _23;
    goto BB13
  }
  BB13 {
    assume { Resolve0.resolve _26 };
    _26 <- voxel_size_2;
    _21 <- IntDiv0.int_div _22 _26;
    goto BB14
  }
  BB14 {
    num_vox_x_20 <- _21 + (1 : int64);
    _30 <- p_1;
    _29 <- _30;
    assume { Resolve3.resolve _30 };
    _28 <- MaxY0.max_y _29;
    goto BB15
  }
  BB15 {
    y_max_27 <- Unwrap0.unwrap _28;
    goto BB16
  }
  BB16 {
    _34 <- p_1;
    _33 <- _34;
    assume { Resolve3.resolve _34 };
    _32 <- MinY0.min_y _33;
    goto BB17
  }
  BB17 {
    y_min_31 <- Unwrap0.unwrap _32;
    goto BB18
  }
  BB18 {
    assert { - 1000 <= Int64.to_int x_min_13 && Int64.to_int x_min_13 <= Int64.to_int x_max_9 && Int64.to_int x_max_9 < 1000 };
    _35 <- ();
    assume { Resolve2.resolve _35 };
    assume { Resolve0.resolve _40 };
    _40 <- y_max_27;
    assume { Resolve0.resolve y_max_27 };
    assume { Resolve0.resolve _41 };
    _41 <- y_min_31;
    _39 <- _40 - _41;
    _38 <- Abs0.abs _39;
    goto BB19
  }
  BB19 {
    assume { Resolve0.resolve _42 };
    _42 <- voxel_size_2;
    _37 <- IntDiv0.int_div _38 _42;
    goto BB20
  }
  BB20 {
    num_vox_y_36 <- _37 + (1 : int64);
    _46 <- p_1;
    _45 <- _46;
    assume { Resolve3.resolve _46 };
    _44 <- MaxZ0.max_z _45;
    goto BB21
  }
  BB21 {
    z_max_43 <- Unwrap0.unwrap _44;
    goto BB22
  }
  BB22 {
    _50 <- p_1;
    _49 <- _50;
    assume { Resolve3.resolve _50 };
    _48 <- MinZ0.min_z _49;
    goto BB23
  }
  BB23 {
    z_min_47 <- Unwrap0.unwrap _48;
    goto BB24
  }
  BB24 {
    assert { - 1000 <= Int64.to_int x_min_13 && Int64.to_int x_min_13 <= Int64.to_int x_max_9 && Int64.to_int x_max_9 < 1000 };
    _51 <- ();
    assume { Resolve2.resolve _51 };
    assume { Resolve0.resolve _56 };
    _56 <- z_max_43;
    assume { Resolve0.resolve z_max_43 };
    assume { Resolve0.resolve _57 };
    _57 <- z_min_47;
    _55 <- _56 - _57;
    _54 <- Abs0.abs _55;
    goto BB25
  }
  BB25 {
    assume { Resolve0.resolve _58 };
    _58 <- voxel_size_2;
    _53 <- IntDiv0.int_div _54 _58;
    goto BB26
  }
  BB26 {
    num_vox_z_52 <- _53 + (1 : int64);
    assert { Int64.to_int num_vox_x_20 > 0 };
    _59 <- ();
    assume { Resolve2.resolve _59 };
    assert { Int64.to_int num_vox_y_36 > 0 };
    _60 <- ();
    assume { Resolve2.resolve _60 };
    assert { Int64.to_int num_vox_z_52 > 0 };
    _61 <- ();
    assume { Resolve2.resolve _61 };
    _63 <- Type.Poitncloud_Point (0 : int64) (0 : int64) (0 : int64);
    assume { Resolve0.resolve _67 };
    _67 <- num_vox_x_20;
    assume { Resolve0.resolve _68 };
    _68 <- num_vox_y_36;
    _66 <- _67 * _68;
    assume { Resolve0.resolve _69 };
    _69 <- num_vox_z_52;
    _65 <- _66 * _69;
    _64 <- UInt64.of_int (Int64.to_int _65);
    voxel_array_62 <- FromElem0.from_elem _63 _64;
    goto BB27
  }
  BB27 {
    assume { Resolve0.resolve _74 };
    _74 <- num_vox_x_20;
    assume { Resolve0.resolve _75 };
    _75 <- num_vox_y_36;
    _73 <- _74 * _75;
    assume { Resolve0.resolve _76 };
    _76 <- num_vox_z_52;
    _72 <- _73 * _76;
    _71 <- UInt64.of_int (Int64.to_int _72);
    count_array_70 <- FromElem1.from_elem (0 : usize) _71;
    goto BB28
  }
  BB28 {
    i_77 <- (0 : usize);
    goto BB29
  }
  BB29 {
    goto BB30
  }
  BB30 {
    goto BB31
  }
  BB31 {
    invariant voxel_len { Seq.length (Model0.model voxel_array_62) = Int64.to_int num_vox_x_20 * Int64.to_int num_vox_y_36 * Int64.to_int num_vox_z_52 };
    invariant count_len { Seq.length (Model1.model count_array_70) = Int64.to_int num_vox_x_20 * Int64.to_int num_vox_y_36 * Int64.to_int num_vox_z_52 };
    assume { Resolve4.resolve _81 };
    _81 <- i_77;
    _83 <- p_1;
    _82 <- Len0.len _83;
    goto BB32
  }
  BB32 {
    _80 <- _81 < _82;
    switch (_80)
      | False -> goto BB44
      | _ -> goto BB33
      end
  }
  BB33 {
    _86 <- p_1;
    assume { Resolve4.resolve _87 };
    _87 <- i_77;
    _85 <- Index0.index _86 _87;
    goto BB34
  }
  BB34 {
    pt_84 <- _85;
    assume { Resolve5.resolve _85 };
    assume { Resolve0.resolve _90 };
    _90 <- Type.poitncloud_point_Point_x pt_84;
    assume { Resolve0.resolve _91 };
    _91 <- x_min_13;
    _89 <- _90 - _91;
    assume { Resolve0.resolve _92 };
    _92 <- voxel_size_2;
    x_floored_88 <- IntDiv0.int_div _89 _92;
    goto BB35
  }
  BB35 {
    assume { Resolve0.resolve _95 };
    _95 <- Type.poitncloud_point_Point_y pt_84;
    assume { Resolve0.resolve _96 };
    _96 <- y_min_31;
    _94 <- _95 - _96;
    assume { Resolve0.resolve _97 };
    _97 <- voxel_size_2;
    y_floored_93 <- IntDiv0.int_div _94 _97;
    goto BB36
  }
  BB36 {
    assume { Resolve0.resolve _100 };
    _100 <- Type.poitncloud_point_Point_z pt_84;
    assume { Resolve0.resolve _101 };
    _101 <- z_min_47;
    _99 <- _100 - _101;
    assume { Resolve0.resolve _102 };
    _102 <- voxel_size_2;
    z_floored_98 <- IntDiv0.int_div _99 _102;
    goto BB37
  }
  BB37 {
    assert { Type.poitncloud_point_Point_x pt_84 - x_min_13 < x_max_9 - x_min_13 };
    _103 <- ();
    assume { Resolve2.resolve _103 };
    assert { x_floored_88 < num_vox_x_20 };
    _104 <- ();
    assume { Resolve2.resolve _104 };
    assert { y_floored_93 < num_vox_y_36 };
    _105 <- ();
    assume { Resolve2.resolve _105 };
    assert { z_floored_98 < num_vox_z_52 };
    _106 <- ();
    assume { Resolve2.resolve _106 };
    assert { Int64.to_int x_floored_88 >= 0 };
    _107 <- ();
    assume { Resolve2.resolve _107 };
    assert { Int64.to_int y_floored_93 >= 0 };
    _108 <- ();
    assume { Resolve2.resolve _108 };
    assert { Int64.to_int z_floored_98 >= 0 };
    _109 <- ();
    assume { Resolve2.resolve _109 };
    assume { Resolve0.resolve _111 };
    _111 <- x_floored_88;
    assume { Resolve0.resolve x_floored_88 };
    assume { Resolve0.resolve _112 };
    _112 <- y_floored_93;
    assume { Resolve0.resolve y_floored_93 };
    assume { Resolve0.resolve _113 };
    _113 <- z_floored_98;
    assume { Resolve0.resolve z_floored_98 };
    ix_110 <- Offset0.offset _111 _112 _113;
    goto BB38
  }
  BB38 {
    assert { UInt64.to_int ix_110 < Int64.to_int num_vox_x_20 * Int64.to_int num_vox_y_36 * Int64.to_int num_vox_z_52 };
    _114 <- ();
    assume { Resolve2.resolve _114 };
    _118 <- voxel_array_62;
    assume { Resolve4.resolve _119 };
    _119 <- ix_110;
    _117 <- Index0.index _118 _119;
    goto BB39
  }
  BB39 {
    assume { Resolve6.resolve _116 };
    _116 <- _117;
    assume { Resolve5.resolve _117 };
    _120 <- pt_84;
    assume { Resolve5.resolve pt_84 };
    _115 <- Add0.add _116 _120;
    goto BB40
  }
  BB40 {
    _122 <- borrow_mut voxel_array_62;
    voxel_array_62 <-  ^ _122;
    assume { Resolve4.resolve _123 };
    _123 <- ix_110;
    _121 <- IndexMut0.index_mut _122 _123;
    goto BB41
  }
  BB41 {
    assume { Resolve6.resolve ( * _121) };
    _121 <- { _121 with current = _115 };
    assume { Resolve7.resolve _121 };
    _126 <- count_array_70;
    assume { Resolve4.resolve _127 };
    _127 <- ix_110;
    _125 <- Index1.index _126 _127;
    goto BB42
  }
  BB42 {
    assume { Resolve4.resolve _124 };
    _124 <- _125;
    assume { Resolve8.resolve _125 };
    _129 <- borrow_mut count_array_70;
    count_array_70 <-  ^ _129;
    assume { Resolve4.resolve _130 };
    _130 <- ix_110;
    assume { Resolve4.resolve ix_110 };
    _128 <- IndexMut1.index_mut _129 _130;
    goto BB43
  }
  BB43 {
    _128 <- { _128 with current = (_124 + (1 : usize)) };
    assume { Resolve9.resolve _128 };
    _79 <- ();
    assume { Resolve2.resolve _79 };
    goto BB31
  }
  BB44 {
    assume { Resolve0.resolve voxel_size_2 };
    assume { Resolve0.resolve x_min_13 };
    assume { Resolve0.resolve y_min_31 };
    assume { Resolve0.resolve z_min_47 };
    assume { Resolve4.resolve i_77 };
    _78 <- ();
    assume { Resolve2.resolve _78 };
    assume { Resolve10.resolve _134 };
    _134 <- count_array_70;
    assume { Resolve1.resolve _135 };
    _135 <- voxel_array_62;
    assume { Resolve0.resolve _137 };
    _137 <- num_vox_x_20;
    assume { Resolve0.resolve num_vox_x_20 };
    _136 <- UInt64.of_int (Int64.to_int _137);
    assume { Resolve0.resolve _139 };
    _139 <- num_vox_y_36;
    assume { Resolve0.resolve num_vox_y_36 };
    _138 <- UInt64.of_int (Int64.to_int _139);
    assume { Resolve0.resolve _141 };
    _141 <- num_vox_z_52;
    assume { Resolve0.resolve num_vox_z_52 };
    _140 <- UInt64.of_int (Int64.to_int _141);
    _0 <- Average0.average _134 _135 _136 _138 _140;
    goto BB45
  }
  BB45 {
    goto BB46
  }
  BB46 {
    goto BB47
  }
  BB47 {
    goto BB49
  }
  BB48 {
    goto BB49
  }
  BB49 {
    goto BB50
  }
  BB50 {
    assume { Resolve1.resolve p_1 };
    return _0
  }
  
end
module Poitncloud_DivPoint_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  val div_point [@cfg:stackify] (sup : Type.poitncloud_point) (div : usize) : Type.poitncloud_point
    requires {UInt64.to_int div > 0}
    
end
module Poitncloud_DivPoint
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use Type
  use prelude.Prelude
  val div_point [@cfg:stackify] (sup : Type.poitncloud_point) (div : usize) : Type.poitncloud_point
    requires {UInt64.to_int div > 0}
    
end
module Poitncloud_Offset2_Interface
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  val offset2 [@cfg:stackify] (x : usize) (y : usize) (z : usize) : usize
    requires {UInt64.to_int z >= 0}
    requires {UInt64.to_int y >= 0}
    requires {UInt64.to_int x >= 0}
    ensures { UInt64.to_int result = UInt64.to_int x * UInt64.to_int y * UInt64.to_int z }
    
end
module Poitncloud_Offset2
  use mach.int.UInt64
  use mach.int.Int
  use mach.int.Int32
  use prelude.Prelude
  val offset2 [@cfg:stackify] (x : usize) (y : usize) (z : usize) : usize
    requires {UInt64.to_int z >= 0}
    requires {UInt64.to_int y >= 0}
    requires {UInt64.to_int x >= 0}
    ensures { UInt64.to_int result = UInt64.to_int x * UInt64.to_int y * UInt64.to_int z }
    
end
module Core_Clone_Clone_Clone_Interface
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_Clone
  type self   
  use prelude.Prelude
  val clone' [@cfg:stackify] (self : self) : self
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom_Interface
  type self   
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Core_Clone_Clone_CloneFrom
  type self   
  use prelude.Prelude
  val clone_from [@cfg:stackify] (self : borrowed self) (source : self) : ()
    requires {false}
    
end
module Poitncloud_Impl1
  use Type
  clone Poitncloud_Impl1_Clone_Interface as Clone0
  clone Core_Clone_Clone_Clone_Interface as Clone1 with type self = Type.poitncloud_point, val clone' = Clone0.clone'
end
module Poitncloud_Impl2
  
end
